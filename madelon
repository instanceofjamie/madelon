#! /usr/bin/env python

from libcloud.types import Provider 
from libcloud.providers import get_driver 
from libcloud.deployment import MultiStepDeployment, ScriptDeployment, SSHKeyDeployment 
import os, sys, ConfigParser

# Fetch some values from the config file
config = ConfigParser.RawConfigParser()
config.read('config/madelon.ini')

# Try to abstract the provider here, as we may end up supporting others
# Theoretically since we are using libcloud, it should support any
# provider that supports the deploy_node function (Amazon EC2 doesn't)
provider = config.get('Madelon', 'provider')
provider_driver = config.get(provider, 'driver')

# API credentials
# Some providers don't have user attributes, only keys
# Bit of a hack right now
if provider not in [ 'Slicehost', 'Linode']:
	user = config.get(provider, 'user')

key = config.get(provider, 'key')

# Preferred image and size
config_distro = config.get(provider, 'distro')
config_size = config.get(provider, 'size')

domain = sys.argv[1]

remote_host = 0

def dependency_check():
	try:
		open(os.path.expanduser("~/.ssh/id_rsa.pub")).read()
	except IOError:
		raise SystemExit("You need at least a public key called id_rsa.pub in your .ssh directory")
	try:
		import fabric
	except ImportError:
		raise SystemExit("You need the Fabric Python library (apt-get install fabric)")

def main():
	# Run some tests
	dependency_check()

	# Make a new connection
	Driver = get_driver( getattr(Provider, provider_driver) )
	try:
		conn = Driver(user, key)
	except(NameError):
		conn = Driver(key)

	# Get a list of the available images and sizes
	images = conn.list_images()
	sizes = conn.list_sizes()

	# We'll use the distro and size from the config ini
	# We accept the first result in any that match for now
	preferred_image = [image for image in images if config_distro in image.name]
	preferred_size = [size for size in sizes if config_size in size.name]

	# Commands to run immediately after installation
	dispatch = [
		SSHKeyDeployment(open(os.path.expanduser("~/.ssh/id_rsa.pub")).read()),
	]
	msd = MultiStepDeployment(dispatch) 

	# Create and deploy a new server now, and run the deployment steps defined above
	print "Provisioning server and running deployment processes"
	node = conn.deploy_node(name=domain, image=preferred_image[0], size=preferred_size[0], deploy=msd)

	print "Provisioning complete, you can ssh as root to %s" % node.public_ip[0]
	if node.extra.get('password'):
		print "The root user's password is %s" % node.extra.get('password')

        if config.getboolean('Git', 'private'):
		# This is a private repo. We need to do some extra legwork to be able to clone it properly.
		# Send the private key. 
		os.system('fab -H %s -u root deploy_key' % node.public_ip[0])

	# Now fetch and run puppet on the remote host
	os.system('fab -H %s -u root deploy_puppet' % node.public_ip[0])

if __name__ == "__main__":
	main()
